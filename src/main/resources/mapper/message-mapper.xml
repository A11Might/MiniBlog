<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xidian.miniblog.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <insert id="insertMessageOrNotice" parameterType="com.xidian.miniblog.entity.Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <update id="updateStatus">
        update message
        set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectLatestNotice" resultType="com.xidian.miniblog.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{eventType}
        )
    </select>

    <select id="selectNoticeCount" resultType="java.lang.Integer">
        select count(id) from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{eventType}
    </select>

    <select id="selectNoticeUnreadCount" resultType="java.lang.Integer">
        select count(id) from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="eventType!=null">
            and conversation_id = #{eventType}
        </if>
    </select>

    <select id="selectNotices" resultType="com.xidian.miniblog.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{eventType}
        order by id desc
        limit #{offset}, #{limit}
    </select>

</mapper>